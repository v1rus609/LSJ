const PDFDocument = require('pdfkit');
const path = require('path');
const fs = require('fs');

// Helper function to format numbers with commas
function formatNumberWithCommas(value) {
    return Number(value).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
}

function generateSalesStatementPDF(sales, totals) {
    const filePath = path.join(__dirname, 'exports', `Sales_Statement_${Date.now()}.pdf`);
    const doc = new PDFDocument({ margin: 50 });

    // Create a writable stream for the PDF
    let stream;
    try {
        stream = fs.createWriteStream(filePath);
        doc.pipe(stream);

        // Generate Document Details
        const currentDate = new Date().toLocaleDateString('en-GB', {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
        });

        // Header Section
        doc.rect(0, 0, doc.page.width, 70).fill('#1ab4f1').fillColor('#000');
        doc.image('./public/lsg.png', 50, 15, { width: 100 });
        doc.font('Helvetica-Bold')
            .fillColor('#FFFFFF')
            .fontSize(16)
            .text('SALES STATEMENT', doc.page.width - 300, 30, { align: 'right' });
        doc.moveDown(2);

        // Date Section
        doc.font('Helvetica-Bold').fontSize(10).fillColor('#000');
        doc.text('DATE:', 450, 90);
        doc.font('Helvetica').text(currentDate, 485, 90);

        // Table Header
        const columnWidths = [50, 130, 100, 100, 100];
        const headers = ['SL No', 'Name of Party', 'Amount (BDT)', 'Receipt (BDT)', 'Balance (BDT)'];
        const tableTop = 120;
        doc.rect(50, tableTop, doc.page.width - 100, 20).fill('#000').stroke().fillColor('#FFF');

        let startX = 50;
        doc.fontSize(10).font('Helvetica-Bold');
        headers.forEach((header, index) => {
            doc.text(header, startX, tableTop + 5, { width: columnWidths[index], align: 'right' });
            startX += columnWidths[index];
        });

        // Table Rows
        let currentY = tableTop + 25;
        doc.fontSize(10).font('Helvetica');
        sales.forEach((sale, index) => {
            startX = 50;

            // Alternate Row Background
            if (index % 2 === 0) {
                doc.rect(50, currentY - 5, doc.page.width - 100, 20).fill('#F4F4F4').stroke().fillColor('#000');
            }

            // Ensure the sale data is parsed as numbers and formatted
            const row = [
                index + 1,
                sale.buyer_name || 'N/A',
                formatNumberWithCommas(sale.total_purchase || 0),
                formatNumberWithCommas(sale.total_paid || 0),
                formatNumberWithCommas(sale.total_unpaid || 0),
            ];
            row.forEach((text, i) => {
                doc.text(text, startX, currentY, { width: columnWidths[i], align: 'right' });
                startX += columnWidths[i];
            });

            currentY += 20;
        });

        // Draw a line above the total
        doc.moveTo(50, currentY)
            .lineTo(83 + columnWidths.reduce((a, b) => a + b, 0), currentY)
            .stroke();

        // Totals Section
        currentY += 10;
        doc.font('Helvetica-Bold');
        doc.text('Total', 130, currentY, { width: columnWidths[0] + columnWidths[1], align: 'center' });
        doc.text(formatNumberWithCommas(totals.totalPurchase || 0), 66 + columnWidths[0] + columnWidths[1], currentY, {
            width: columnWidths[2],
            align: 'center',
        });
        doc.text(formatNumberWithCommas(totals.totalPaid || 0), 71 + columnWidths[0] + columnWidths[1] + columnWidths[2], currentY, {
            width: columnWidths[3],
            align: 'center',
        });
        doc.text(formatNumberWithCommas(totals.totalUnpaid || 0), 66 + columnWidths[0] + columnWidths[1] + columnWidths[2] + columnWidths[3], currentY, {
            width: columnWidths[4],
            align: 'center',
        });

        // Footer Section: Centered and positioned at the bottom
        const footerY = doc.page.height - 50;
        doc.fontSize(12).font('Helvetica-Bold').text('Thank You For Your Business', 50, footerY - 100, { align: 'center' });
        doc.fontSize(10).font('Helvetica').text('Generated by bYTE Ltd.', 50, footerY - 30, { align: 'center' });
        doc.text('For inquiries, contact support@lsgroup.com.bd', 50, footerY - 15, { align: 'center' });

    } catch (error) {
        console.error('Error generating PDF:', error);
        throw error;
    } finally {
        if (stream) {
            doc.end();
        }
    }

    return new Promise((resolve, reject) => {
        stream.on('finish', () => resolve(filePath));
        stream.on('error', reject);
    });
}

module.exports = generateSalesStatementPDF;
